@startuml
actor User
participant MainWindow
participant AddBackup
participant Settings
participant EasySaveViewModel
participant BackupWorkManager
participant BackupWork
participant FileManager
participant CryptoSoft
participant SoftwareDetector
participant NetworkMonitor
participant RemoteConsoleServer
participant RemoteConsoleClient
participant PriorityRules
participant MutexManager

== Add a Backup ==
User -> MainWindow : Click_AddBackup()
MainWindow -> AddBackup : ShowForm()
User -> AddBackup : FillForm(name, source, target, type)
AddBackup -> BackupWorkManager : AddWork(name, source, target, type)
BackupWorkManager -> BackupWork : Create new(name, source, target, type)
BackupWork -> BackupWork : Initialize State = ACTIVE
BackupWork --> BackupWorkManager : Instance created

== Execute All Backups ==
User -> MainWindow : Click_RunAllBackups()
MainWindow -> BackupWorkManager : StartAll()

BackupWorkManager -> NetworkMonitor : GetNetworkLoad()
NetworkMonitor --> BackupWorkManager : LoadPercentage
alt High Load (> threshold)
    BackupWorkManager -> BackupWorkManager : ReduceParallelTasks()
end

loop For each BackupWork
    BackupWorkManager -> BackupWork : StartAsync()

    BackupWork -> PriorityRules : CheckFilePriority(file)
    alt High Priority
        PriorityRules --> BackupWork : OK
    else
        PriorityRules --> BackupWork : WAIT
        BackupWork -> BackupWork : WaitUntilPriorityOK()
    end

    BackupWork -> BackupWork : IsLargeFile(file > n Ko)?
    alt LargeFile & another large file running
        BackupWork -> BackupWork : WaitUntilOtherEnds()
    end

    BackupWork -> MutexManager : RequestCryptoSoftAccess()
    MutexManager -> CryptoSoft : LockAndEncrypt(filePath, key)
    CryptoSoft --> MutexManager : EncryptedFile
    MutexManager --> BackupWork : FileReady

    BackupWork -> FileManager : TransferFile(encryptedFile)
    FileManager --> BackupWork : TransferDone

    BackupWork -> BackupWorkManager : ReportProgress()

end

== Pause if Business Software Detected ==
SoftwareDetector -> BackupWorkManager : BusinessAppDetected()
BackupWorkManager -> BackupWork : Pause()
BackupWork -> FileManager : WaitUntilCurrentFileEnds()
BackupWork -> BackupWorkManager : Paused

== Resume after Business App Ends ==
SoftwareDetector -> BackupWorkManager : BusinessAppStopped()
BackupWorkManager -> BackupWork : Resume()

== Real-Time Console Control ==
User -> RemoteConsoleClient : ConnectToServer()
RemoteConsoleClient -> RemoteConsoleServer : Auth + Connect
RemoteConsoleServer -> BackupWorkManager : GetStatus()
BackupWorkManager --> RemoteConsoleServer : StatusData
RemoteConsoleServer --> RemoteConsoleClient : ForwardStatus()
RemoteConsoleClient -> User : DisplayStatus()

User -> RemoteConsoleClient : PauseWork(workID)
RemoteConsoleClient -> RemoteConsoleServer : SendPause(workID)
RemoteConsoleServer -> BackupWorkManager : PauseWork(workID)
BackupWorkManager -> BackupWork : Pause()

User -> RemoteConsoleClient : ResumeWork(workID)
RemoteConsoleClient -> RemoteConsoleServer : SendResume(workID)
RemoteConsoleServer -> BackupWorkManager : ResumeWork(workID)
BackupWorkManager -> BackupWork : Resume()

User -> RemoteConsoleClient : StopWork(workID)
RemoteConsoleClient -> RemoteConsoleServer : SendStop(workID)
RemoteConsoleServer -> BackupWorkManager : StopWork(workID)
BackupWorkManager -> BackupWork : Stop()

== User Settings ==
User -> MainWindow : Open_Settings()
MainWindow -> Settings : DisplayWindow()
User -> Settings : ChangeLanguage("FR")
Settings -> EasySaveViewModel : SetLanguage("FR")
User -> Settings : SetLogType("JSON")
Settings -> EasySaveViewModel : SetLogFormat("JSON")
@enduml
